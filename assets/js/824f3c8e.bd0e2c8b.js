"use strict";(self.webpackChunkvkuhlmann_www=self.webpackChunkvkuhlmann_www||[]).push([[691],{3905:function(e,t,n){n.d(t,{Zo:function(){return h},kt:function(){return d}});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},h=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,h=l(e,["components","mdxType","originalType","parentName"]),u=c(n),d=o,m=u["".concat(s,".").concat(d)]||u[d]||p[d]||i;return n?a.createElement(m,r(r({ref:t},h),{},{components:n})):a.createElement(m,r({ref:t},h))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,r=new Array(i);r[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,r[1]=l;for(var c=2;c<i;c++)r[c]=n[c];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},1163:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return c},toc:function(){return h},default:function(){return u}});var a=n(7462),o=n(3366),i=(n(7294),n(3905)),r=["components"],l={title:"Showing LaTeX in LaTeX: The good, the bad and the ugly",author:"Vincent Kuhlmann",author_url:"https://github.com/vkuhlmann",author_image_url:"/img/VK.png",tags:["latex","highlight","verbatim","code"],slug:"showing-latex"},s=void 0,c={permalink:"/blog/showing-latex",source:"@site/blog/2021-03-15-showing-latex-in-latex.md",title:"Showing LaTeX in LaTeX: The good, the bad and the ugly",description:"{/*",date:"2021-03-15T00:00:00.000Z",formattedDate:"March 15, 2021",tags:[{label:"latex",permalink:"/blog/tags/latex"},{label:"highlight",permalink:"/blog/tags/highlight"},{label:"verbatim",permalink:"/blog/tags/verbatim"},{label:"code",permalink:"/blog/tags/code"}],readingTime:3.66,truncated:!0,prevItem:{title:"Functions in TI-BASIC: Challenge accepted",permalink:"/blog/functions-in-ti-basic"}},h=[{value:'The ugly: Just monospace <span id="monospace"></span>',id:"the-ugly-just-monospace",children:[]},{value:'The bad: Verbatim <span id="verbatim"></span>',id:"the-bad-verbatim",children:[]},{value:'The good: Automatic colors <span id="colors"></span>',id:"the-good-automatic-colors",children:[]}],p={toc:h};function u(e){var t=e.components,l=(0,o.Z)(e,r);return(0,i.kt)("wrapper",(0,a.Z)({},p,l,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("div",null),(0,i.kt)("p",null,"LaTeX is a code-based word processing tool most known for typesetting\nmathematics and its further use in exact sciences, most notably publications.\nHence many people in the industry will pick up the basics, often using material\nprovided by the organization. Convenient for demonstration, the slides or reader\nis written in LaTeX. However, when trying to display literal LaTeX code, people\ntend to fall back to very rudimentary solutions. We can do better!"),(0,i.kt)("p",null,"We'll explore the good, the bad and the ugly in typesetting LaTeX. Just in\nreverse order, to follow the thought process."),(0,i.kt)("p",null,"In this post:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("a",{parentName:"li",href:"#monospace"},"The ugly: Just monospace")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("a",{parentName:"li",href:"#verbatim"},"The bad: Verbatim")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("a",{parentName:"li",href:"#colors"},"The good: Automatic colors"))),(0,i.kt)("h2",{id:"the-ugly-just-monospace"},"The ugly: Just monospace ",(0,i.kt)("span",{id:"monospace"})),(0,i.kt)("p",null,"In constrast to normal text, code if often shown ",(0,i.kt)("span",{style:{fontFamily:"monospace"}}," in monospace"),", i.e. each character has\nequal width, as it was in the early days of technology. Not just that, it is\nalso convenient when raw text is the only formatting you work with; just put\ndashes on the next line, and you've got yourself some 'underlined' text.\nIn LaTeX, this font type can be selected using the ",(0,i.kt)("inlineCode",{parentName:"p"},"\\texttt{some text}")," command,\nor when used between braces, ",(0,i.kt)("inlineCode",{parentName:"p"},"{\\ttfamily some text}")," formats everything in\nmonospace upto the the closing brace."),(0,i.kt)("p",null,"However, this is very merely a font switch, and ",(0,i.kt)("inlineCode",{parentName:"p"},"\\texttt{\\maketitle}")," will not\nprint a literal ",(0,i.kt)("samp",null,"\\maketitle"),", but will perform ",(0,i.kt)("inlineCode",{parentName:"p"},"\\maketitle"),", creating\na title heading in monospace! To prevent command interpretation of a\nbackslash, one could resort to ",(0,i.kt)("inlineCode",{parentName:"p"},"\\texttt{\\textbackslash maketitle}"),", which uses a\ncommand to display a literal backslash."),(0,i.kt)("h2",{id:"the-bad-verbatim"},"The bad: Verbatim ",(0,i.kt)("span",{id:"verbatim"})),(0,i.kt)("p",null,"There is also a way to temporarily disable the command interpreting property of\na backslash, as well as other special characters (like","\xa0","%). In LaTeX code,\none can do ",(0,i.kt)("inlineCode",{parentName:"p"},"\\verb|\\maketitle|"),". This prints ",(0,i.kt)("inlineCode",{parentName:"p"},"\\maketitle")," literally, and also in\nmonospace already. If you need to display the '|'-character, you can use\n",(0,i.kt)("inlineCode",{parentName:"p"},"\\verb!Exlamation points \\verb|instead|.!"),". Or really any non-space character\nyou like, the character which delimits the begin, is the one which delimits the\nend."),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"\\verb")," command is for in-line usage. To show multiple lines of code, or to\ngive it its own line, use is its block equivalent, the ",(0,i.kt)("inlineCode",{parentName:"p"},"verbatim"),"-environment:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-latex"},"And for this see the following code:\n\\begin{verbatim}\n    \\begin{document}\n        \\maketitle\n    \\end{document}\n\\end{verbatim}\n")),(0,i.kt)("p",null,"However, the code is actually formatted as"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-plaintext"},"\\begin{document}\n\\maketitle\n\\end{document}\n")),(0,i.kt)("p",null,"that is, indentation is lost. To fix this, use the\n",(0,i.kt)("inlineCode",{parentName:"p"},"Verbatim"),"-environment from the package ",(0,i.kt)("inlineCode",{parentName:"p"},"fancyvrb"),". Add\n",(0,i.kt)("inlineCode",{parentName:"p"},"\\usepackage{fancyvrb}")," anywhere before your\n",(0,i.kt)("inlineCode",{parentName:"p"},"\\begin{document}"),", and then use"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"And for this see the following code:\n\\begin{Verbatim}[tabsize=4]\n    \\begin{document}\n        \\maketitle\n    \\end{document}\n\\end{Verbatim}\n")),(0,i.kt)("p",null,"This preserves the indentation from the code. However, you might also experience\neverything being indented too much. That is because you naturally indent your\nLaTeX code, but those indentations are now picked up by Verbatim! Select the\nlines and Shift+Tab one or multiple times to unindent them. This might look a\nbit ugly in your LaTeX code, but hey, we've not yet arrived at the proper way\neither..."),(0,i.kt)("h2",{id:"the-good-automatic-colors"},"The good: Automatic colors ",(0,i.kt)("span",{id:"colors"})),(0,i.kt)("p",null,"You could actually add another level before this: using ",(0,i.kt)("inlineCode",{parentName:"p"},"\\texttt"),", but also\n",(0,i.kt)("inlineCode",{parentName:"p"},"\\textcolor")," to color different parts of the command manually. If you went down\nthat alley already, just wait until you read the next paragraph. Actually, don't\nwait, go ahead!"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"listings")," package provides code syntax highlighting for various code\nlanguages. That includes LaTeX. However, it's syntax highlighting is very minimal\nand doesn't do much coloring. Therefore, I wrote my own package, which you can\nfind at ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/vkuhlmann/highlight-latex"},"https://github.com/vkuhlmann/highlight-latex"),"."),(0,i.kt)("p",null,"For example, if you want a block of highlighted code, it can be as easy as\nadding the package, and writing"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"\\begin{highlightblock}\n    % File: document.tex\n    \\documentclass[a4paper]{article}\n    \\usepackage{amsmath}\n\n    \\begin{document}\n        Insert math like $\\sqrt{2}$.\n        \\inAccA\\inAccB\\inAccC\n\n    \\end{document}\n\\end{highlightblock}\n")),(0,i.kt)("p",null,"This generates the right box of the demo:"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"highlight-latex demo",src:n(650).Z,title:"Highlight LaTeX demo"})),(0,i.kt)("p",null,"(Don't mind the failed dollar signs, it's due to conversion from PDF to an\nimage.)"),(0,i.kt)("p",null,"Then inline code is done using the ",(0,i.kt)("inlineCode",{parentName:"p"},"\\hll|\\documentclass[]{}|")," command. There is\nof course a bit more to it, at least if you want to have some commands colored\ndifferently like in this demo. All this I've already explained on the project\npage, so I refer you to:"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/vkuhlmann/highlight-latex"},"https://github.com/vkuhlmann/highlight-latex")),(0,i.kt)("p",null,"Happy LaTeXing!"))}u.isMDXComponent=!0},650:function(e,t,n){t.Z=n.p+"assets/images/highlight-latex-demo-b2e7801f1b9d93afd1a2bd665cefbec5.png"}}]);